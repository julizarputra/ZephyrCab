{
    "docs": [
        {
            "location": "/", 
            "text": "Before you read the full docs, it is suggested that you read README.md, provided \non GitHub\n. This quickstart guide is intended for relatively experienced computer users, so follow the more detailed user guide if you don't know what you're doing.\n\n\n\n\n\n\nQuickstart Guide\n\n\n\n\nPrerequisites\n\n\n\n\n\n\nA DCC layout connected to JMRI\n\n\n\n\n\n\nA web server (you can use the one built into JMRI)\n\n\n\n\n\n\n\n\nInstallation\n\n\nThis installation guide is for technically-minded developer/nerd people. If you need a simplified guide, try \nthis one.\n\n\nYou can download a release from GitHub. Once you have the release extracted from the ZIP, simply drag all the files into a directory on any web server. When you go to the web server, you should be left at a \"Connection Settings\" page that looks like this.\n\n\n\n\nBefore you proceed any further, you need to set up your \nbundles.json\n file. Unfortunately, there is no automated tool to do this as of now. You may see the comments in the code for explanation of how to set it up. Feel free to join the Gitter chat below if you want help!\n\n\n\n\nOnce you have your \nbundles.json\n set up, you should be able to use the program normally. Connect to your JMRI PC (if you don't know the IP, you will need to find that) using the \"Connection\" tab, and everything should work. If you run into problems, post an issue on \nthe project's GitHub page\n.", 
            "title": "Home"
        }, 
        {
            "location": "/#quickstart-guide", 
            "text": "Prerequisites    A DCC layout connected to JMRI    A web server (you can use the one built into JMRI)     Installation  This installation guide is for technically-minded developer/nerd people. If you need a simplified guide, try  this one.  You can download a release from GitHub. Once you have the release extracted from the ZIP, simply drag all the files into a directory on any web server. When you go to the web server, you should be left at a \"Connection Settings\" page that looks like this.   Before you proceed any further, you need to set up your  bundles.json  file. Unfortunately, there is no automated tool to do this as of now. You may see the comments in the code for explanation of how to set it up. Feel free to join the Gitter chat below if you want help!   Once you have your  bundles.json  set up, you should be able to use the program normally. Connect to your JMRI PC (if you don't know the IP, you will need to find that) using the \"Connection\" tab, and everything should work. If you run into problems, post an issue on  the project's GitHub page .", 
            "title": "Quickstart Guide"
        }, 
        {
            "location": "/userguide/installation-guide/", 
            "text": "Server-Side Installation\n\n\n\n\n\n\n\n\nlocoThrottle.js runs in a browser. This means to use it, you'll need a web server. This server can be anywhere, and does not necessarily need to be on the same network as your JMRI PC since all code is client-side JavaScript.\n\n\n\n\nAdditionally, since the entire app is static, you can host it on anything you like, including services such as Amazon S3.\n\n\n\n\n\n\n\n\nIf you are not an experienced user, we recommend you use the web server already built into JMRI.\n You can read more on this at \nthe JMRI docs.\n\n\n\n\n\n\n\n\nUsing JMRI's Jetty server\n\n\nThis is the recommended way to install for new users.\n\n\n\n\n\n\nMake sure JMRI's Web Server is functional.\n \n\n\n\n\n\n\nThe default port is 12080, so from your JMRI PC you should be able to visit \nhttp://localhost:12080\n and see the web interface.\n\n\n\n\n\n\nMake sure that the web server is set to run on JMRI startup. \nRead more about JMRI Web Access here.\n\n\n\n\n\n\n\n\n\n\nExtract locoThrottle.js into the \n/web/locoThrottleJS\n directory inside your JMRI install folder.\n\n\n\n\n\n\nThis is what ultimately determines the URL you must use to access locoThrottle.js, so make sure you do this right.\n\n\n\n\n\n\nYou want to extract the contents of the release (from the ZIP) into \n/web/locoThrottleJS\n. This should put a whole bunch of files (including \nindex.html\n) in that folder.\n\n\n\n\n\n\n\n\n\n\nVisit the page in your browser\n\n\n\n\n\n\nIf you did step 2 correctly, you should be able to access locoThrottle.js by adding \n/web/locoThrottleJS\n onto your normal web access folder path.\n\n\n\n\n\n\nFor example, if you are viewing this on your JMRI machine, your web access path is \nhttp://localhost:12080\n. Your locoThrottle.js path would be \nhttp://localhost:12080/web/locoThrottleJS\n.\n\n\n\n\n\n\nIf you plan on using locoThrottle.js from another PC, or a mobile device, you should set a static IP on your JMRI PC.\n\n\n\n\n\n\nIf it worked, you should be left at the \"Connection\" tab when you open the page in a browser. If you get \"Connection Refused\" or a similar error, check to be sure that your firewall is set to allow JMRI through. This has not historically been a problem in Linux, but in Windows it could be an issue.\n\n\n\n\n\n\n\n\n\n\n\n\nUsing your own web server\n\n\nlocoThrottle.js is built as an entirely static HTML/CSS/JS app. This means you can install it on any web server, regardless of whether or not it can handle things like PHP, or Python. All the code runs client-side.\n\n\nTo install it on your own server, simply drag and drop the extracted release files into a directory of your choice. It should not matter what directory you put them in, or what network the server is on. As long as the client device is connected to the same network as your JMRI PC, you should have access to JMRI.\n\n\nWe do not provide an official guide for setting it up on your own web server because it's so simple. If you don't know what you're doing, or you want an easier way, use the \nUsing JMRI's Jetty server\n guide above.", 
            "title": "Installation Guide"
        }, 
        {
            "location": "/userguide/installation-guide/#server-side-installation", 
            "text": "locoThrottle.js runs in a browser. This means to use it, you'll need a web server. This server can be anywhere, and does not necessarily need to be on the same network as your JMRI PC since all code is client-side JavaScript.   Additionally, since the entire app is static, you can host it on anything you like, including services such as Amazon S3.     If you are not an experienced user, we recommend you use the web server already built into JMRI.  You can read more on this at  the JMRI docs.     Using JMRI's Jetty server  This is the recommended way to install for new users.    Make sure JMRI's Web Server is functional.      The default port is 12080, so from your JMRI PC you should be able to visit  http://localhost:12080  and see the web interface.    Make sure that the web server is set to run on JMRI startup.  Read more about JMRI Web Access here.      Extract locoThrottle.js into the  /web/locoThrottleJS  directory inside your JMRI install folder.    This is what ultimately determines the URL you must use to access locoThrottle.js, so make sure you do this right.    You want to extract the contents of the release (from the ZIP) into  /web/locoThrottleJS . This should put a whole bunch of files (including  index.html ) in that folder.      Visit the page in your browser    If you did step 2 correctly, you should be able to access locoThrottle.js by adding  /web/locoThrottleJS  onto your normal web access folder path.    For example, if you are viewing this on your JMRI machine, your web access path is  http://localhost:12080 . Your locoThrottle.js path would be  http://localhost:12080/web/locoThrottleJS .    If you plan on using locoThrottle.js from another PC, or a mobile device, you should set a static IP on your JMRI PC.    If it worked, you should be left at the \"Connection\" tab when you open the page in a browser. If you get \"Connection Refused\" or a similar error, check to be sure that your firewall is set to allow JMRI through. This has not historically been a problem in Linux, but in Windows it could be an issue.       Using your own web server  locoThrottle.js is built as an entirely static HTML/CSS/JS app. This means you can install it on any web server, regardless of whether or not it can handle things like PHP, or Python. All the code runs client-side.  To install it on your own server, simply drag and drop the extracted release files into a directory of your choice. It should not matter what directory you put them in, or what network the server is on. As long as the client device is connected to the same network as your JMRI PC, you should have access to JMRI.  We do not provide an official guide for setting it up on your own web server because it's so simple. If you don't know what you're doing, or you want an easier way, use the  Using JMRI's Jetty server  guide above.", 
            "title": "Server-Side Installation"
        }, 
        {
            "location": "/userguide/configure-locomotives/", 
            "text": "Setting up your Locomotive Roster (unfinished)\n\n\nSince locoThrottle.js needs quite a bit of information about a locomotive to accurately simulate its physics, we must get additional data about the locomotive that isn't on the JMRI roster. This includes everything from weight, to horsepower, to fuel consumption data.\n\n\nWe also need data on the model, including DCC decoder information (for accurately simulated sounds), and gearing information for the model (so we can run it at the correct speed in scale MPH)\n\n\nIn all, we need 3 key things for any locomotive:\n\n\n\n\n\n\nModel Information:\n This links specific DCC speed values to specific speeds in scale MPH. This is what makes sure the locomotive is going at the correct scale speed.\n\n\n\n\n\n\nDecoder Information:\n This tells the program everything about how your DCC decoder behaves. All decoders have basic support, which includes speed, direction, and lighting, but if you want sound your decoder must be specifically supported.\n\n\n\n\n\n\nPrototype Information:\n This tells the physics simulator everything it needs to know about the prototype locomotive. This data is what's responsible for accurately simulating the behavior of the real thing.\n\n\n\n\n\n\n\n\nTo tell locoThrottle.js the correct combination of those three items for one of your locomotives, we employ \nbundles.json\n. This file contains a series of \"bundles\" that link model and prototype information to a given JMRI roster entry. locoThrottle.js grabs the decoder information straight from the roster. (Handy, huh?)\n\n\nRight now, we don't have a pretty graphical tool for editing \nbundles.json\n. This means you'll have to edit it yourself on your JMRI PC, or whatever you're hosting locoThrottle.js on.\n\n\nSetup\n\n\nbundles.json\n contains a single object, written in JSON format. This object contains a child object for each locomotive.\n\n\n\n\nEditing \nbundles.json\n for Dummies\n\n\nIf you've never edited JSON before, read this guide.\n If you're a developer, you should save yourself some time and \nread the developer's version below.\n\n\n\n\n\n\nIn your locoThrottle.js installation directory, go to \n/bundles\n.\n If you followed our recommended installation method, your directory would be \n/web/locoThrottleJS/bundles\n inside your JMRI install folder.\n\n\n\n\n\n\nOpen \nbundles.json\n with your text editor of choice.\n\n\n\n\nIf you don't have a text editor with syntax highlighting (for example, if you're using Notepad in Windows) I highly recommend using a better one for this. I personally (\nk4kfh@github\n) use \nBrackets\n, but you can take your pick.\n\n\n\n\n\n\n\n\nFind the beginning of the \nbundles\n object. This is usually marked by \nbundles = {\n.\n\n\n\n\n\n\nStop here. This tutorial is unfinished.\n\n\n\n\n\n\n\n\nEditing JSON for Developers\n\n\nThis tutorial is shortened for people who already know/understand JSON syntax.", 
            "title": "Configure Locomotives"
        }, 
        {
            "location": "/userguide/configure-locomotives/#setting-up-your-locomotive-roster-unfinished", 
            "text": "Since locoThrottle.js needs quite a bit of information about a locomotive to accurately simulate its physics, we must get additional data about the locomotive that isn't on the JMRI roster. This includes everything from weight, to horsepower, to fuel consumption data.  We also need data on the model, including DCC decoder information (for accurately simulated sounds), and gearing information for the model (so we can run it at the correct speed in scale MPH)  In all, we need 3 key things for any locomotive:    Model Information:  This links specific DCC speed values to specific speeds in scale MPH. This is what makes sure the locomotive is going at the correct scale speed.    Decoder Information:  This tells the program everything about how your DCC decoder behaves. All decoders have basic support, which includes speed, direction, and lighting, but if you want sound your decoder must be specifically supported.    Prototype Information:  This tells the physics simulator everything it needs to know about the prototype locomotive. This data is what's responsible for accurately simulating the behavior of the real thing.     To tell locoThrottle.js the correct combination of those three items for one of your locomotives, we employ  bundles.json . This file contains a series of \"bundles\" that link model and prototype information to a given JMRI roster entry. locoThrottle.js grabs the decoder information straight from the roster. (Handy, huh?)  Right now, we don't have a pretty graphical tool for editing  bundles.json . This means you'll have to edit it yourself on your JMRI PC, or whatever you're hosting locoThrottle.js on.", 
            "title": "Setting up your Locomotive Roster (unfinished)"
        }, 
        {
            "location": "/userguide/configure-locomotives/#setup", 
            "text": "bundles.json  contains a single object, written in JSON format. This object contains a child object for each locomotive.   Editing  bundles.json  for Dummies  If you've never edited JSON before, read this guide.  If you're a developer, you should save yourself some time and  read the developer's version below.    In your locoThrottle.js installation directory, go to  /bundles .  If you followed our recommended installation method, your directory would be  /web/locoThrottleJS/bundles  inside your JMRI install folder.    Open  bundles.json  with your text editor of choice.   If you don't have a text editor with syntax highlighting (for example, if you're using Notepad in Windows) I highly recommend using a better one for this. I personally ( k4kfh@github ) use  Brackets , but you can take your pick.     Find the beginning of the  bundles  object. This is usually marked by  bundles = { .    Stop here. This tutorial is unfinished.     Editing JSON for Developers  This tutorial is shortened for people who already know/understand JSON syntax.", 
            "title": "Setup"
        }, 
        {
            "location": "/devguide/websockets/", 
            "text": "", 
            "title": "WebSockets Interface"
        }, 
        {
            "location": "/devguide/jmri-object/", 
            "text": "", 
            "title": "jmri Object"
        }
    ]
}